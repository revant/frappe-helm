#!/usr/bin/env python3

import argparse
import os
import shutil
import sys
import ruamel.yaml
import semantic_version
import git

def main():
    args = parse_args()

    frappe_version = git_version('frappe', args.version)
    erpnext_version = git_version('erpnext', args.version)
    chart_dict = update_chart(erpnext_version, args.bump_type)
    chart_version = chart_dict['version']
    update_values(frappe_version, erpnext_version)
    repo = git.Repo(os.getcwd())
    git_check_branch(repo)
    git_commit_release_message(repo, frappe_version, erpnext_version, chart_version)
    git_tag_repo(repo, chart_version)
    git_push_all(repo)


def parse_args():
    parser = argparse.ArgumentParser(
        description='helm chart release wizard for ERPNext',
        add_help=True)
    parser.add_argument(
        'version',
        action='store',
        type=str,
        help='Branch suffix after version-??-??: e.g. "12"')
    parser.add_argument(
        'bump_type',
        action='store',
        type=str,
        choices=['major', 'minor', 'patch'],
        help='Bump Type for Helm Chart: e.g. "major", "minor", "patch"')
    return parser.parse_args()


def git_version(service, version, delete_dir=False):
    print(f'Pulling {service} v{version}')

    if not os.path.isdir(f'/tmp/{service}'):
        git.Repo.clone_from(f'https://github.com/frappe/{service}', f'/tmp/{service}', branch=f'version-{version}')

    cd = os.getcwd()
    os.chdir(f'/tmp/{service}')
    repo = git.Repo(path=f'/tmp/{service}')
    repo.git.fetch('--tags')

    # XX-beta becomes XX for tags search
    version = version.split('-')[0]

    version_tag = sorted(list(filter(lambda t: f'v{version}' in t.name, repo.tags)), key=lambda t: t.commit.committed_date)[-1].name
    os.chdir(cd)

    if delete_dir:
        shutil.rmtree(f'/tmp/{service}')

    return version_tag


def get_yaml_file(file_name):
    data_string = None
    try:
        with open(file_name) as f:
            data_string = f.read()
    except Exception as exc:
        print(exc)
        exit(1)
    return data_string


def save_yaml_file(data, file_name):
    with open(file_name, 'w') as f:
        ruamel.yaml.round_trip_dump(data, f)


def update_chart(erpnext_version, bump_type):
    # Update Chart.yaml
    chart_file = f'{os.getcwd()}/erpnext/Chart.yaml'
    chart_string = get_yaml_file(chart_file)
    chart_dict = ruamel.yaml.round_trip_load(chart_string, preserve_quotes=True)

    chart_dict['appVersion'] = erpnext_version
    chart_version = semantic_version.Version(chart_dict['version'])
    if bump_type == 'major':
        chart_version = chart_version.next_major()
    if bump_type == 'minor':
        chart_version = chart_version.next_minor()
    if bump_type == 'patch':
        chart_version = chart_version.next_patch()
    chart_dict['version'] = str(chart_version)

    save_yaml_file(chart_dict, chart_file)
    return chart_dict

def update_values(frappe_version, erpnext_version):
    # Update values.yaml
    values_file = f'{os.getcwd()}/erpnext/values.yaml'
    values_string = get_yaml_file(values_file)
    values_dict = ruamel.yaml.round_trip_load(values_string, preserve_quotes=True)
    values_dict['nginxImage']['tag'] = erpnext_version
    values_dict['pythonImage']['tag'] = erpnext_version
    values_dict['socketIOImage']['tag'] = frappe_version
    save_yaml_file(values_dict, values_file)


def git_check_branch(repo):
    if repo.active_branch.name != 'master':
        print('Checkout to master branch to release chart')
        exit(1)


def git_tag_repo(repo, version):
    repo.create_tag(version, message=f"Helm Chart v{version}")


def git_commit_release_message(repo, frappe_version, erpnext_version, chart_version):
    commit_message = """Publish

Helm Chart {chart_version}
Frappe {frappe_version}
ERPNext {erpnext_version}""".format(
    chart_version=chart_version,
    frappe_version=frappe_version,
    erpnext_version=erpnext_version)

    repo.git.add(all=True)
    repo.git.commit('-m', commit_message)


def git_push_all(repo):
    # hack always assumes remote is called origin
    repo.git.push('origin', '--follow-tags')


if __name__ == "__main__":
    main()
